// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PCT.Save
{

using global::System;
using global::FlatBuffers;

public struct TransformTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static TransformTable GetRootAsTransformTable(ByteBuffer _bb) { return GetRootAsTransformTable(_bb, new TransformTable()); }
  public static TransformTable GetRootAsTransformTable(ByteBuffer _bb, TransformTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TransformTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PCT.Save.Vec3? Pos(int j) { int o = __p.__offset(4); return o != 0 ? (PCT.Save.Vec3?)(new PCT.Save.Vec3()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int PosLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public PCT.Save.Vec3? Scale(int j) { int o = __p.__offset(6); return o != 0 ? (PCT.Save.Vec3?)(new PCT.Save.Vec3()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int ScaleLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public PCT.Save.Vec3? Rot(int j) { int o = __p.__offset(8); return o != 0 ? (PCT.Save.Vec3?)(new PCT.Save.Vec3()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int RotLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<PCT.Save.TransformTable> CreateTransformTable(FlatBufferBuilder builder,
      VectorOffset posOffset = default(VectorOffset),
      VectorOffset scaleOffset = default(VectorOffset),
      VectorOffset rotOffset = default(VectorOffset)) {
    builder.StartTable(3);
    TransformTable.AddRot(builder, rotOffset);
    TransformTable.AddScale(builder, scaleOffset);
    TransformTable.AddPos(builder, posOffset);
    return TransformTable.EndTransformTable(builder);
  }

  public static void StartTransformTable(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddPos(FlatBufferBuilder builder, VectorOffset posOffset) { builder.AddOffset(0, posOffset.Value, 0); }
  public static void StartPosVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static void AddScale(FlatBufferBuilder builder, VectorOffset scaleOffset) { builder.AddOffset(1, scaleOffset.Value, 0); }
  public static void StartScaleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static void AddRot(FlatBufferBuilder builder, VectorOffset rotOffset) { builder.AddOffset(2, rotOffset.Value, 0); }
  public static void StartRotVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static Offset<PCT.Save.TransformTable> EndTransformTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PCT.Save.TransformTable>(o);
  }
};


}
